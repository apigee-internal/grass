<?xml version="1.0" encoding="UTF-8"?><ProxyEndpoint name="default">
	<Description>Default Proxy to create flows on an API</Description>
    

    <FaultRules>
	<FaultRule name="InvalidApiKey">
	<Condition>(fault.name = "FailedToResolveAPIKey") or (fault.name = "InvalidApiKeyForGivenResource") or (fault.name = "InvalidApiKey")</Condition>
		<Step>
			<FaultRules />
			<Name>RaiseFault.ApplicationKey</Name>
		</Step>
		</FaultRule>
		<FaultRule name="InvalidRequest">
<!-- 		<Step> -->
<!-- 			<Name>RaiseFault.InvalidRequest</Name> -->
<!-- 		</Step> -->
	</FaultRule>
	</FaultRules>
	<Flows>

		<Flow name="Authorization">
			<Description>This flow is for Authorize call. This flow redirects the user to a consent application. after developer's api key validation. Stores state information.</Description>
			<!-- Here ADD polocy to validate request parameter -->
            <Request>
                <Step>
                    <Name>ValidateRequest</Name>
                </Step>
             <Step>
					<FaultRules />
					<Name>validateApiKey</Name>
				</Step>
				<Step>
					<Condition>(error_variable != null)</Condition>
					<Name>RaiseFault.InvalidAuthorizationRequest</Name>
				</Step>
				<Step>
					<FaultRules />
					<Name>GetApiProduct</Name>
				</Step>
				<Step>
					<FaultRules />
					<Name>ConvertToJSON</Name>
				</Step>
				<Step>
					<FaultRules />
					<Name>GetScopes</Name>
				</Step>
				<Step>
					<FaultRules />
					<Name>ValidateScopeValues_JS</Name>
				</Step>
				<Step>
				 	<Condition>nonce != null and nonce != ""</Condition>
					<Name>CheckNonceReplayAttack</Name>
				</Step>
				<Step>
				 	<Condition>nonce_cache_value != null</Condition>
					<Name>AssignReplayAttackError</Name>
				</Step>
				<Step>
					<Condition>error_variable != null</Condition>
					<Name>RaiseFault.InvalidAuthorizationRequest</Name>
				</Step>
				<Step>
				 	<Condition>nonce != null and nonce != ""</Condition>
					<Name>SaveNonceInCache</Name>
				</Step>
                <Step>
                    <Name>GenerateUUID</Name>
                </Step>
                <Step>
                    <Name>SetSessionPayload</Name>
                </Step>
                <Step>
                    <Name>Session.SetInCache</Name>
                </Step>
            </Request>
		    <Response>
		        <!-- Authorization Successful Response -->
                <Step>
                    <FaultRules/>
                    <Name>redirectToConsent</Name>
                </Step>
		    </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/authorize&quot;) and ((request.verb = &quot;POST&quot;) or (request.verb = &quot;GET&quot;)) </Condition>
		</Flow>

        <Flow name="OauthCodeRedirect">
            <Description>This flow generates authcode after user is authenticated</Description>
            <Request>
            </Request>
            <Response>
                <Step>
                    <FaultRules/>
                    <Name>generateAuthCode</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/code&quot;) and (request.verb = &quot;GET&quot;)</Condition>
        </Flow>

        <Flow name="GenerateAccessToken">
            <Description>This flow is for Access token generation</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>generateAccessToken</Name>
                </Step>
            </Request>

            <Response>
            
              <Step>
              <FaultRules/>
                   <Condition>response.status.code = "200"</Condition>
                   <Name>AssignIssuer</Name>
               </Step>
              <Step>
              <FaultRules/>
                   <Condition>response.status.code = "200"</Condition>
                   <Name>GetAuthReqParamsFromCache</Name>
               </Step>
              <Step>
                    <FaultRules/>
                   <Condition>authReqVariableJSON != null</Condition>
                   <Name>ExtractAuthReqParams</Name>
               </Step>
            
               <Step>
                    <FaultRules/>
                   <Condition>response.status.code = "200"</Condition>
                   <Name>ExtractAccessTokenResponse</Name>
               </Step>
               <Step>
                  <Condition>response.status.code = "200"</Condition>
                   <Name>JwtTokenSigning</Name>
               </Step>
              <Step>
                  <Condition>response.status.code = "200"</Condition>
                   <Name>CreateScopeArray_JS</Name>
               </Step>
        	  	<Step>
                  <Condition>response.status.code = "200"</Condition>
                   <Name>AssignStoreConsentRequest</Name>
               </Step>
               	<Step>
                  <Condition>response.status.code = "200"</Condition>
                   <Name>StoreConsent.ServiceCallout</Name>
               </Step>
               <Step>
                   <Condition>response.status.code = "200"</Condition>
                    <Name>GenerateAccessToken.Response</Name>
                </Step>
              <Step>
                   <Condition>response.status.code != "200" or authReqVariableJSON = null </Condition>
                    <Name>RaiseFault.InvalidRequest</Name>
                </Step>
             </Response>
            
            <Condition>(proxy.pathsuffix MatchesPath &quot;/accesstoken&quot;) and (request.verb = &quot;POST&quot;)</Condition>
        </Flow>

        <Flow name="GenerateRefreshToken">
           
            <Description>This flow is for Access token generation</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>generateRefreshToken</Name>
                </Step>
            </Request>
            <Response>
              <Step>
                   <Condition>response.status.code != "200"</Condition>
                    <Name>RaiseFault.InvalidRequest</Name>
          </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath &quot;/refreshtoken&quot;) and (request.verb = &quot;POST&quot;)</Condition>
        </Flow>
   
  		<Flow name="User Details">
		<Condition>(proxy.pathsuffix MatchesPath "/getdetails") and (request.verb= "GET")</Condition>
		<Request>
			<Step>
				<FaultRules />
				<Name>AccesstokenValidation</Name>
			</Step>
			<Step>
				<Name>GetUserProfileFromAppServices</Name>
			</Step>
			<Step>
          		<Condition>appservicesuserprofile.status.code = "200"</Condition>
				<Name>ExtractUserProfileResponse</Name>
			</Step>
			<Step>
          		<Condition>appservicesuserprofile.status.code = "200"</Condition>
				<Name>CustomizeUserProfile_JS</Name>
			</Step>
		</Request>
		<Response>
<!-- 			<Step> -->
<!--           		<Condition>appservicesuserprofile.status.code != "200"</Condition> -->
<!-- 				<Name>RaiseFault.InvalidRequest</Name> -->
<!-- 			</Step> -->
			<Step>
          		<Condition>appservicesuserprofile.status.code = "200"</Condition>
				<Name>AssignIdentityMessageResponse</Name>
			</Step>
		</Response>
	</Flow>
	    
       	<Flow name="Default-Operation">
            <Description>Bad requests</Description>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>handleBadRequest</Name>
                </Step>
            </Request>
            <Response>
            </Response>
        </Flow>

	</Flows>

	<PreFlow name="PreFlow">
        <Request>
            <Step>
                <Condition>(request.verb=&quot;OPTIONS&quot;)</Condition>
                <Name>CORSPreflight</Name>
            </Step>
        </Request>
    </PreFlow>
	
   <PostFlow name="PostFlow">
        <Response>
            <Step>
                <Condition>(request.verb!=&quot;OPTIONS&quot;)</Condition>
                <Name>CORS</Name>
            </Step>
<!--             <Step> -->
<!--                 <Name>SendCookieInResposne</Name> -->
<!--             </Step> -->
        </Response>    
    </PostFlow>  

    <HTTPProxyConnection>
    	<BasePath>/oauth/v2</BasePath>
	 </HTTPProxyConnection>
    <RouteRule name="default"/>
</ProxyEndpoint>
